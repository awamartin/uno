<!DOCTYPE html>
<html>
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script type="module" src="https://cdn.jsdelivr.net/npm/js-cookie@rc/dist/js.cookie.min.mjs"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>

<script type="module">
  import Cookies from 'https://cdn.jsdelivr.net/npm/js-cookie@rc/dist/js.cookie.min.mjs'
  //get uuid, store a new hash if one does not exist
  //the uuid is used to identify a returning player
  console.log(`Cookie = ${Cookies.get('uuid')}`);
  if (Cookies.get('uuid') == null) {
    Cookies.set('uuid', Math.random());
  }
  var uuid = Cookies.get('uuid');
  var playerCount = 5;
  var playedWild = '';
  var playerdata = [];


  var debugEnabled = false;
  debugEnabled = getUrlParameter('debug');
  console.log(debugEnabled);

  function getUrlParameter(sParam) {
    var sPageURL = window.location.search.substring(1),
      sURLVariables = sPageURL.split('&'),
      sParameterName,
      i;

    for (i = 0; i < sURLVariables.length; i++) {
      sParameterName = sURLVariables[i].split('=');

      if (sParameterName[0] === sParam) {
        return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
      }
    }
  };


  //open socket
  var socket = io();
  socket.on('connect', () => {
    //on socket connection
    console.log(socket.connected);
    socket.emit('register', uuid);

    //misc buttons
    $("#deal_but").click(function () {
      socket.emit('deal', uuid);
    });
    $("#pick_but").click(function () {
      socket.emit('pickup', uuid);
    });
    $("#sortmyhand").click(function () {
      socket.emit('sort', uuid);
    });
    $("#challenge_but").click(function () {
      socket.emit('challenge', uuid);
    });
    $("#drawCard_but").click(function () {
      socket.emit('drawCard', uuid);
    });
    $("#reset_but").click(function () {
      socket.emit('reset', uuid);
    });

    /* 	for (let i = 0; i < 5; i++) {
         //$("#uno"+${i}+"_but").click(function () {
         //socket.emit("uno"+${i}+"_but");
       let thisString = "#uno"+i+"_but";
       let thisSecondString = "uno"+i;
       console.log(thisSecondString);
    
        $(thisString).click(function () {
         socket.emit(thisSecondString, uuid);
       });			
     	
         };
     */

    $("#uno1_but").click(function () {
      socket.emit('uno8', uuid);
    });


    //wildcard selections
    $("#red_but").click(function () {
      socket.emit('playcard', { uuid: uuid, card: playedWild, wildColour: 'red' });
      $("#colours").hide();
    });
    $("#blue_but").click(function () {
      socket.emit('playcard', { uuid: uuid, card: playedWild, wildColour: 'blue' });
      $("#colours").hide();
    });
    $("#green_but").click(function () {
      socket.emit('playcard', { uuid: uuid, card: playedWild, wildColour: 'green' });
      $("#colours").hide();
    });
    $("#yellow_but").click(function () {
      socket.emit('playcard', { uuid: uuid, card: playedWild, wildColour: 'yellow' });
      $("#colours").hide();
    });

    //name change
    $("#playerName").change(function () {
      console.log('namechange')
      socket.emit('namechange', { uuid: uuid, name: $("#playerName").val() });
    });

    //update state of misc items
    socket.on('state', data => {
      let discardTop = data.discardTop;
      let pileCount = data.pileCount;
      let discardCount = data.discardCount;
      let slapdownCount = data.slapdownCount;
      let drawAmount = data.drawAmount;
      let playerNext = data.playerNext;
      let dealerNext = data.dealerNext;
      playerCount = data.playerCount;
      let inProgress = data.inProgress;
      let challengeEnabled = data.challengeEnabled;
      let drawEnabled = data.drawEnabled;
      let currentColour = data.currentColour;
      let reverseDirection = data.reverseDirection;
      let playerdata = data.playerdata;

      $("#playerNext").text(playerNext);
      $("#dealerNext").text(dealerNext);
      $("#discardCount").text(discardCount);
      $("#slapdownCount").text(slapdownCount);
      $("#drawAmount").text(drawAmount);
      $("#currentColour").text(currentColour);
      $("#reverseDirection").text(reverseDirection);
      $("#pileCount").text(pileCount);
      $("#playerCount").text(playerCount);

      console.log(playerdata);

      //update discard pile
      $("#discardTop").empty();
      let card = $('<img/>',
        {
          src: discardTop,
          width: '100px',
          class: "cards"
        });
      $("#discardTop").append(card);
      //show challenge buttons
      if (challengeEnabled && (playerNext == $("#playerName").val())) {
        $("#challenge").show();
      } else {
        $("#challenge").hide();
      }

      //only allow reset if debug
      if (("debug" == $("#playerName").val()) || debugEnabled == 'true') {
        $("#resetbut").show();
      } else {
        $("#resetbut").hide();
      }

      //show Your Deal text
      if (inProgress) {
        $("#sortmyhand").show();
        $("#yourdeal").hide();
        $("#deal_but").hide();
        $("#currentcolour").show();
        //Reverse Direction
        if (reverseDirection) {
          $("#clockwise").hide();
          $("#anticlockwise").show();
        } else {
          $("#clockwise").show();
          $("#anticlockwise").hide();
        }
        //show Your Turn text
        if (playerNext == $("#playerName").val()) {
          $("#yourturn").show();
          $("discardTop").addClass('pulse');
          if (!drawEnabled) {
            $("#pick_but").show();
          } else {
            $("#pick_but").hide();
          }
        } else {
          $("#yourturn").hide();
          $("discardTop").removeClass('pulse');
          $("#pick_but").hide();
        }
        //show drawCard buttons
        if (drawEnabled && (playerNext == $("#playerName").val())) {
          $("#drawCard").show();
          $("#drawCardtext").show();
          $("#pick_but").hide();
        } else {
          $("#drawCard").hide();
          $("#drawCardtext").hide();
        }

      } else {
        $("#sortmyhand").hide();
        $("#challenge").hide();
        $("#drawCardtext").hide();
        $("#drawCard").hide();
        $("#pick_but").hide();
        $("#currentcolour").hide();
        $("#yourturn").hide();
        if (dealerNext == $("#playerName").val()) {
          $("#yourdeal").show();
          $("#deal_but").show();
        } else {
          $("#yourdeal").hide();
          $("#deal_but").hide();
        }
      }

      //handle 1st card colour choice for wild
      let topCard = discardTop || '';
      if (playerNext == $("#playerName").val() && discardTop.includes('wild') && currentColour == ' ') {

        playedWild = 'deal';
        $("#colours").show();
      }

      //clear playertable
      $('#playertable').empty();
      //add title row
      $('#playertable').append(`<tr><th >Player name</th><th >Cards in hand</th><th >Wins</th><th >Score</th><th >Uno!</th><th >Catch!</th></tr>`);
      //dyanmically add the other players
      //EXAMPLE ONLY
      for (let i = 0; i < playerCount; i++) {
        $('#playertable').append(`<tr><th >${playerdata[i].name}</th><th >${playerdata[i].cardsInHand}</th><th >${playerdata[i].wins}</th><th >${playerdata[i].score}</th><th ><button class="btn" id="uno1_but">Uno! Player ${i}</button></th><th ><button class="btn" id="catch${i}_but">Catch Player ${i}</button></th></tr>`);
      }

      /*
      notes:
      Control the look and feel of the table (row size etc) by changing the css class
      */
    });

    //log message
    socket.on('message', text => {
      //add to log
      $("#messages").prepend(`${text}<br />`)
    });

    //force refresh
    socket.on('refresh', text => {
      location.reload();
    });

    socket.on('rechooseColour', () => {
      playedWild = 'challenge';
      $("#colours").show();
    });

    //player status is sent to a socket named as the player's uuid
    socket.on(uuid, player => {
      console.log(player);
      $("#hand").empty();
      $("#playerName").val(player.name);

      //add each card to the hand
      let card;
      jQuery.each(player.hand, (card) => {
        //we create a card like this so we can attach some logic to it
        card = $('<img/>',
          {
            src: player.hand[card],
            width: '100px',
            click: function () {
              console.log(`played ${jQuery(this).text()}`);
              if (jQuery(this).attr('src').includes('wild')) {
                $("#colours").show();
                playedWild = jQuery(this).attr('src');
              } else {
                socket.emit('playcard', { uuid: uuid, card: jQuery(this).attr('src') });
              }
            }
          });
        $("#hand").append(card);
      });
    });


  });

</script>


<head>
  <title>
    UNO
  </title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
</head>

<body>
  <div class='titleblock z-depth-3'>
    <div class='title'>
      UNO Game
    </div>
    <div style="display:flex;">
      <div class='decorative-red'></div>
      <div class='decorative-green'></div>
      <div class='decorative-blue'></div>
      <div class='decorative-yellow'></div>
    </div>
  </div>
  <div class='main'>
    <div class='gamebuttons'>
      <button class="btn pulse" id="deal_but">Deal</button>
      <button class="btn" id="pick_but" hidden="true">Pick-up</button>
    </div>
    <div class="stattext">Your Name</br>
      <input type="text" id="playerName">
    </div>
    <div class='gamestats'>
      <div class='gscol1'>
        <div class="stattext">Number of Players</br>
          <label class="statlabel" id="playerCount"></label>
        </div>
        <div class="stattext">Next Turn</br>
          <label class="statlabel" id="playerNext"></label>
        </div>
        <div hidden="true" id="clockwise" class="stattext">Play Direction</br>
          <label class="statlabel">Clockwise</label>
        </div>
        <div hidden="true" id="anticlockwise" class="stattext">Play Direction</br>
          <label class="statlabel">Anti-Clockwise</label>
        </div>
      </div>
      <div class='gscol1'>
        <div class="stattext">Cards in Pile</br>
          <label class="statlabel" id="pileCount"></label>
        </div>
        <div class="stattext">Cards in Discard Pile</br>
          <label class="statlabel" id="discardCount"></label>
        </div>
        <div hidden="true" id="currentcolour" class="stattext">Current Colour</br>
          <label class="statlabel c" id="currentColour"></label>
        </div>
      </div>
    </div>
    <div class='textarea sectiontitle'>The Discard Pile</div>
    <div class='discardsection'>
      <div id="discard" class="discard">
        <div id="discardTop" class="discardTop"></div>
        <div id='yourturn' class="btn yourturnbut pulse">Your Turn</div>
      </div>
      <div hidden="true" id="colours">
        <button class="blue_but btn" id="blue_but">Blue</button>
        <button class="green_but btn" id="green_but">Green</button>
        <button class="red_but btn" id="red_but">Red</button>
        <button class="yellow_but btn" id="yellow_but">Yellow</button>
      </div>
      <div hidden="true" id="challenge">
        <button class="btn" id="challenge_but">Challenge</button>
      </div>
      <div hidden="true" id="drawCardtext" class="stattext">Draw Cards</br><label class="statlabel" id="drawAmount">
      </div>
      <div hidden="true" id="drawCard">
        <button class="btn pulse" id="drawCard_but">Draw</button>
      </div>

      <div class='textarea sectiontitle'>Your Hand</div>
    </div>
    <div id="hand">

    </div>
    <button class="btn" id="sortmyhand" hidden="true">Sort hand</button>
    <div class='textarea sectiontitle'>Scores</div>
    <div>
      <table id="playertable"></table>
    </div>
    <div class='textarea sectiontitle'>Log</div>
    <div id="messages">

    </div>
    <div hidden="true" id="resetbut"><button class="btn" id="reset_but">Reset Game</button></div>
  </div>
</body>

</html>